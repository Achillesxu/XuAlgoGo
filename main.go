// Package XuAlgoGo
// Time    : 2021/5/6 2:10 下午
// Author  : xushiyin
// contact : yuqingxushiyin@gmail.com
package main

import (
	"bytes"
	"crypto/sha256"
	"encoding"
	"fmt"
	"hash"
	"log"
)

const (
	example1 = "this is a example"
	example2 = "second example"
)

// main project entrance
func main() {
	var fHash hash.Hash
	fHash = sha256.New()
	fHash.Write([]byte(example1))
	var marshaler encoding.BinaryMarshaler
	var ok bool
	marshaler, ok = fHash.(encoding.BinaryMarshaler)
	if !ok {
		log.Fatal("fitst hash is not generated by encoding.Binarymarshaler")
	}
	var data []byte
	var err error
	data, err = marshaler.MarshalBinary()
	if err != nil {
		log.Fatal("failure to create first hash", err)
	}
	fmt.Printf("first hash %x\n", data)

	var sHash hash.Hash
	sHash = sha256.New()
	var unmarshaler encoding.BinaryUnmarshaler
	unmarshaler, ok = sHash.(encoding.BinaryUnmarshaler)
	if !ok {
		log.Fatal("second Hash is not generated by encoding.BinaryUnmarshaler")
	}
	if err := unmarshaler.UnmarshalBinary(data); err != nil {
		log.Fatal("failure to create hash:", err)
	}
	fHash.Write([]byte(example2))
	sHash.Write([]byte(example2))
	fmt.Printf("%x\n", fHash.Sum(nil))
	fmt.Println(bytes.Equal(fHash.Sum(nil), sHash.Sum(nil)))

}
